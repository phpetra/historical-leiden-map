{% extends "::base.html.twig" %}

{% set active_page = 'map' %}

{% block content %}
    <div id="map"></div>

    <div id="legend">
        <h4 id="datasetTitle"></h4>

        <label>Beschikbare filters</label><br/>
        <select id="filter-column" name="filter-column"></select>
        <select id="numeric-column" name="numeric-column"></select>

        <hr/>
        <div id="properties"></div>
    </div>

{% endblock %}

{% block javascripts %}

    <script>
        var dataset;
        $(document).ready(function () {

            // init map first
            var map = L.map('map', {
                center: [52.16, 4.49], // leiden
                zoom: 17,
                maxZoom: 18
            });

            // add default Map
            map.addLayer(cartodb);

            // convert fancy definitions to leaflet basic style
            var baseMaps = [];
            $.each(mapDefinitions, function (index, baseMap) {
                baseMaps[baseMap.name] = baseMap.layer;
            });

            var control = L.control.layers(baseMaps, {}, {
                collapsed: false
            }).addTo(map);


            // needed to be able to destroy the control - layers
            var currentLayers = [];
            var currentLegends = [];

            var dataset;
            var cache = {};

            function loadDataset() {
                if (!dataset) {
                    dataset = $.getJSON("{{ app.request.baseUrl }}/api/files/geojson/id/{{ id }}").promise();
                } else {

                }
                dataset.done(createDatasetLayers);
            }

            function loadGeoJson(file, callback) {
                console.log(file);
                if (!cache[file]) {
                    cache[file] = $.getJSON("{{ app.request.baseUrl }}/serve/geojson/" + file).promise();
                }
                cache[file].done(callback);
            }


            loadDataset();

            // get dataset details from API
            //var promise = $.getJSON("{{ app.request.baseUrl }}/api/files/geojson/id/{{ id }}");
            function createDatasetLayers(dataset) {

                // INIT stuffs
                $('#datasetTitle').text(dataset.title);

                if (dataset['numeric-filters'].length > 0) {
                    populateFilterOptions('#numeric-column', dataset['numeric-filters']);
                } else {
                    $('#numeric-column').hide();
                }
                if (dataset['string-filters'].length > 0) {
                    populateFilterOptions('#filter-column', dataset['string-filters']);
                } else {
                    $('#filter-column').hide();
                }

                /** NUMERIC FILTERS */
                // add event to create numeric filtered layers
                $('#numeric-column').on('change', function () {
                    var column = $('#numeric-column').val();
                    if (column.length > 1) {
                        displayChloroThingies(dataset, column);
                    }
                });

                var grades = [];
                function getColor(d) {
                    var r = d > grades[8] ? sequentialColors[8] : d > grades[7] ? sequentialColors[7] :
                            d > grades[6] ? sequentialColors[6] : d > grades[5] ? sequentialColors[5] :
                                    d > grades[4] ? sequentialColors[4] : d > grades[3] ? sequentialColors[3] :
                                            d > grades[2] ? sequentialColors[2] : d > grades[1] ? sequentialColors[1] :
                                                    d >= grades[0] ? sequentialColors[0] :
                                                            '#333';
                    return r;
                }

                // creates an array of no more than 9 elements for the chloropeth thing
                function createTaxAmountRanges(amounts) {
                    amounts.sort();

                    var min = amounts[0];
                    var max = amounts[amounts.length - 1];
                    var step = ((max - min) / 8).toFixed(2);
                    return new Array(9)
                            .join().split(',')
                            .map(function (item, index) {
                                        return (index * step) + min;
                                    }
                            )
                }

                loadGeoJson(dataset.csvName, displayChloroThingies);

                /** Displays all unique values of one column as individual layers (alle "beroepen" bv) */
                function displayChloroThingies(dataset, columnName, data) {
                    clearControls();

                    // get geoJSON data from buildings file
                    //var promise = $.getJSON("{{ app.request.baseUrl }}/serve/geojson/" + dataset.csvName);
                    //promise.then(function (data) {

                    // get all the money options
                    var bedragen = [];
                    var all = L.geoJson(data, {
                        onEachFeature: function (feature) {
                            if (feature.properties[columnName] > 0) {
                                var x = parseInt(feature.properties[columnName]);
                                if ($.inArray(x) == -1) {
                                    bedragen.push(x);
                                }
                            }
                        }
                    });
                    map.fitBounds(all.getBounds(), {
                        padding: [5, 5]
                    });

                    // crunch the numbers and set the legend
                    bedragen = bedragen.filter(onlyUnique);
                    grades = createTaxAmountRanges(bedragen);

                    var legend = L.control({position: 'topright'});
                    legend.onAdd = function (map) {
                        var div = L.DomUtil.create('div', 'info right-legend');
                        div.innerHTML = '';
                        div.innerHTML += '<h4>Legenda ' + columnName + '</h4>';
                        // loop through our density intervals and generate a label with a colored square for each interval
                        for (var i = 0; i < grades.length; i++) {
                            div.innerHTML +=
                                    '<i style="background:' + getColor(grades[i] + 1) + '"></i> ' +
                                    grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + ' <br>' : '+');
                        }
                        div.innerHTML += '<br><i style="background: #333"></i>Geen waarde';
                        return div;
                    };
                    currentLegends.push(legend);
                    legend.addTo(map);

                    // add the stylized layer to the map
                    var l = L.geoJson(data, {
                        style: function (feature, layer) {
                            return {
                                fillColor: getColor(feature.properties[columnName]),
                                weight: 1,
                                opacity: 1,
                                color: 'white',
                                dashArray: '',
                                fillOpacity: 0.7
                            }
                        },
                        onEachFeature: handleFeature
                    }).addTo(map);

                    //});
                }

                /** STRING FILTERS */

                // add event to create the filtered layers
                $('#filter-column').on('change', function () {
                    var column = $('#filter-column').val();
                    if (column.length > 1) {
                        displayStringColumnAsLayers(dataset, column);
                    }
                });


                /** Displays all unique values of one column as individual layers (alle "beroepen" bv) */
                function displayStringColumnAsLayers(dataset, columnName) {
                    clearControls();

                    // get geoJSON data from buildings file
                    var promise = $.getJSON("{{ app.request.baseUrl }}/serve/geojson/" + dataset.csvName);
                    promise.then(function (data) {
                        // get all unique values from the specified column into a new array (all "beroepen" for instance)
                        var occupations = [];
                        var all = L.geoJson(data, {
                            onEachFeature: function (feature) {
                                if (feature.properties[columnName].length > 2) {
                                    if ($.inArray(feature.properties[columnName], occupations) == -1) {
                                        occupations.push(feature.properties[columnName]);
                                    }
                                }
                            }
                        });
                        map.fitBounds(all.getBounds(), {
                            padding: [5, 5]
                        });

                        // create a separate layer for the unique values and filter only the matching ones
                        $.each(occupations, function (index, beroep) {
                            var counter = 0;
                            var l = L.geoJson(data, {
                                style: {color: differenceColors[index], opacity: 0.9, weight: 3, fillOpacity: .65},
                                onEachFeature: handleFeature,
                                filter: function (feature, layer) {
                                    if (feature.properties[columnName] == beroep) {
                                        counter++;
                                        return true;
                                    }
                                }
                            }).addTo(map);
                            currentLayers.push(l);

                            control.addOverlay(l, '<span class="fa fa-2x fa-user" style="color:' + differenceColors[index] + '"></span>&nbsp;' + beroep + ' ('+ counter + ')');
                        });
                    });
                }


            };

            // clear layer controls and legends
            function clearControls() {
                //clear previous legend controls
                $.each(currentLegends, function (index, layer) {
                    layer.removeFrom(map);
                });
                currentLegends = [];

                //clear previous layers form map and control
                $.each(currentLayers, function (index, layer) {
                    map.removeLayer(layer);
                    control.removeLayer(layer);
                });
                currentLayers = [];

            }
        })
        ;

    </script>

{% endblock %}